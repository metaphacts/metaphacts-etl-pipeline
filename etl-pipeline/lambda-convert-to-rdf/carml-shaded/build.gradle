plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

ext {
    CARML_VERSION = '0.4.9'
}

dependencies {
    // we need our own variant of carml rewriting javax.inject.Inject to jakarta.inject.Inject
    implementation group: 'io.carml', name: 'carml-engine', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-commons', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-model', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-join-storage', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-rdf-mapper', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-logical-source-resolver', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-logical-source-resolver-xpath', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-logical-source-resolver-csv', version: CARML_VERSION, transitive: false
    implementation group: 'io.carml', name: 'carml-logical-source-resolver-jsonpath', version: CARML_VERSION, transitive: false
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

shadowJar {
   relocate 'javax.inject', 'jakarta.inject'
}

// this is a work-around to mark the libraries as exported
// so they will be visible to the parent project in Eclipse
eclipse {
    classpath {
      file {
            whenMerged {
                // setting all library dependencies to exported
                def matchingEntries = entries.findAll { it.kind == 'lib' }
                matchingEntries.each {
                    it.exported = true 
                }
                //println "Final Classpath Entries:"
                //entries.each { println it }
            }
        }
    }
}
